#!/usr/bin/env python3

import signal
import os
import sys
import gi

gi.require_version('Gdk', '3.0')
gi.require_version('Gst', '1.0')
gi.require_version('Gtk', '3.0')
gi.require_version('GstVideo', '1.0')
gi.require_version('GstGL', '1.0')
gi.require_version('GnomeDesktop', '3.0')

from gi.repository import Gdk, Gst, Gtk, GdkX11, GstVideo, GstGL, GnomeDesktop, GLib
from sphvr.sinks import *
from collections import OrderedDict

from ctypes import cdll
try:
    x11 = cdll.LoadLibrary('libX11.so')
    x11.XInitThreads()
except OSError:
    pass


# Check if we're in development or installed version and set paths properly
def _in_devel():
    root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    return os.path.exists(os.path.join(root_dir, '.git'))


def _add_sphvr_path():
    directory = os.path.dirname(os.path.abspath(__file__))
    if _in_devel():
        root = os.path.split(directory)[0]
    else:
        root = os.path.join('/usr/lib', 'sphvr', 'python')

    if not root in sys.path:
        sys.path.append(root)


class Monitor:
    def __init__(self, id):
        self.id = id
        self.geometry = None
        self.physical = []
        self.product = ""
        self.vendor = ""
        self.display_name = ""

    def __str__(self):
        return " ".join(("%dx%d" % (self.geometry.width, self.geometry.height),
                         "%.1fcmx%.1fcm" % (self.physical[0], self.physical[1]),
                         self.vendor, self.product, self.display_name))


class SPHVR:
    def __init__(self):
        self.hmd_monitor = None
        self.monitors = OrderedDict()
        self.pipeline = None

        if len(sys.argv) != 2:
            print("Usage:")
            print("       sphvr <uri>")
            print("Example:")
            print("       sphvr file:///home/bmonkey/Videos/elephants.webm")
            exit()
        else:
            self.video_uri = sys.argv[1]

        Gtk.init([])
        Gst.init([])

        self.query_monitors()

        if self.hmd_monitor:
            self.width, self.height = self.hmd_monitor.geometry.width, self.hmd_monitor.geometry.height
            self.hmd_sink = GLSink()
        else:
            print("No HMD found in:")
            self.print_monitors()
            self.width, self.height = 1920, 1080

        self.desktop_sink = GLSink()

        self.init_pipeline()

        desktop_window = Gtk.Window()
        desktop_window.connect("delete-event", self.window_closed)
        desktop_window.connect("key-press-event", self.key_pressed)
        desktop_window.set_default_size(self.width, self.height)
        desktop_window.set_title("SPHVR")
        desktop_window.add(self.desktop_sink.widget)
        desktop_window.show_all()
        self.desktop_sink.set_handle()

        if self.hmd_monitor:
            hmd_window = Gtk.Window()
            hmd_window.set_default_size(self.width, self.height)
            hmd_window.set_title("HMD")
            hmd_window.connect("delete-event", self.window_closed)
            hmd_window.connect("key-press-event", self.key_pressed)
            hmd_window.add(self.hmd_sink.widget)
            hmd_window.show_all()
            self.hmd_sink.set_handle()
            self.fullscreen_window_on_hmd(hmd_window)

        try:
            from gi.repository import GdkPixbuf
            pixbuf = GdkPixbuf.Pixbuf.new_from_file("data/sphvr.png")
            theme = Gtk.IconTheme.get_default()
            theme.add_builtin_icon("sphvr", 256, pixbuf)
            self.hmd_window.set_icon_name("sphvr")
        except GLib.Error:
            # no icon
            pass

        if self.pipeline.set_state(Gst.State.PLAYING) == Gst.StateChangeReturn.FAILURE:
            self.pipeline.set_state(Gst.State.NULL)
        else:
            Gtk.main()

    def fullscreen_window_on_hmd(self, window):
        screen = Gdk.Screen.get_default()
        window.move(self.hmd_monitor.geometry.x, self.hmd_monitor.geometry.y)
        window.fullscreen_on_monitor(screen, self.hmd_monitor.id)
        print("Found HMD Screen:", self.hmd_monitor)

    @staticmethod
    def pad_added_cb(element, stuff, sink):
        element.link(sink)

    def quit_app(self):
        self.pipeline.set_state(Gst.State.NULL)
        Gtk.main_quit()

    def bus_cb(self, bus, message):
        if message.type == Gst.MessageType.EOS:
            self.pipeline.seek(1.0,
                               Gst.Format.TIME,
                               Gst.SeekFlags.FLUSH,
                               Gst.SeekType.SET, 0,
                               Gst.SeekType.NONE, 0)
        elif message.type == Gst.MessageType.ERROR:
            print("Error:", message.parse_error())
            self.quit_app()

    def init_pipeline(self):
        self.pipeline = Gst.Pipeline()
        src = Gst.ElementFactory.make("uridecodebin", None)
        src.set_property("uri", self.video_uri)
        glupload = Gst.ElementFactory.make("glupload", None)
        glcolorconvert = Gst.ElementFactory.make("glcolorconvert", None)
        videorate = Gst.ElementFactory.make("videorate", None)
        vrcompositor = Gst.ElementFactory.make("vrcompositor", None)
        hmdwarp = Gst.ElementFactory.make("hmdwarp", None)

        tee = Gst.ElementFactory.make("tee", None)

        desktop_queue = Gst.ElementFactory.make("queue", None)

        # caps
        caps = Gst.Caps.from_string("video/x-raw(memory:GLMemory), width=%d, height=%d, framerate=75/1" % (self.width, self.height))
        cf = Gst.ElementFactory.make("capsfilter")
        cf.set_property("caps", caps)

        self.pipeline.add(src, glupload, glcolorconvert, videorate)
        self.pipeline.add(vrcompositor, cf, hmdwarp, tee, desktop_queue)
        self.pipeline.add(self.desktop_sink.element)
        if self.hmd_monitor:
            hmd_queue = Gst.ElementFactory.make("queue", None)
            self.pipeline.add(self.hmd_sink.element, hmd_queue)
        src.link(glupload)
        glupload.link(glcolorconvert)
        glcolorconvert.link(videorate)
        videorate.link(vrcompositor)
        vrcompositor.link(cf)

        cf.link(hmdwarp)

        if self.hmd_monitor:
            hmd_queue.link(self.hmd_sink.element)
        desktop_queue.link(self.desktop_sink.element)

        hmdwarp.link(tee)

        if self.hmd_monitor:
            src_pad = tee.get_request_pad("src_0")
            sink_pad = hmd_queue.get_static_pad("sink")
            src_pad.link(sink_pad)

        src_pad = tee.get_request_pad("src_1")
        sink_pad = desktop_queue.get_static_pad("sink")
        src_pad.link(sink_pad)

        src.connect("pad-added", self.pad_added_cb, glupload)

        bus = self.pipeline.get_bus()
        bus.add_signal_watch()
        bus.connect("message", self.bus_cb)

    def query_monitors(self):
        # GDK
        screen = Gdk.Screen.get_default()
        for m in range(0, screen.get_n_monitors()):
            plug = screen.get_monitor_plug_name(m)
            self.monitors[plug] = Monitor(m)
            self.monitors[plug].geometry = screen.get_monitor_geometry(m)
            self.monitors[plug].physical = [float(screen.get_monitor_height_mm(m)) / 10.0,
                                            float(screen.get_monitor_width_mm(m)) / 10.0]
        # GnomeDesktop
        gscreen = GnomeDesktop.RRScreen.new(screen)
        gconfig = GnomeDesktop.RRConfig.new_current(gscreen)
        outputs = GnomeDesktop.RRConfig.get_outputs(gconfig)

        for info in outputs:
            plug = info.get_name()
            self.monitors[plug].vendor = info.get_vendor()
            self.monitors[plug].product = info.get_product()
            self.monitors[plug].display_name = info.get_display_name()
            if "Rift DK2" in self.monitors[plug].product:
                self.hmd_monitor = self.monitors[plug]

    def print_monitors(self):
        for k, v in self.monitors.items():
            print(k, v)

    def key_pressed(self, widget, key):
        if key.keyval == Gdk.KEY_Escape:
            self.quit_app()

    def window_closed(self, widget, event):
        self.quit_app()


signal.signal(signal.SIGINT, signal.SIG_DFL)
_add_sphvr_path()
SPHVR()


